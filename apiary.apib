FORMAT: 1A
HOST: http://4play.apiblueprint.org/

# 4Play

4Play is a web-accessible games database that places special emphasis on a pleasurable design and supports a REST API

# Group Game

## Game [/games]

List of Games returns the total list of games in our data model

### List of Games [GET]

+ Response 200 (application/json)

        [
            {
                "Name": "Name",
                "Platform": "Platform",
                "Company": "Company",
                "Engine": "Engine",
                "Tags": [
                    "Tag One",
                    "Tag 2"
                ],
                "Rating": "Rating",
                "ID": "id"
            }
        ]

### Game [/games/{game_id}]

These are the fields that will describe a game:

+ Name
+ Platform
+ Company
+ Engine
+ Tags - An array of special fields.
+ Rating - The average rating of the game
+ ID - the id of the game in our database

+ Parameters
    + game_id: 1 (required, number) - The game's id which is unique to each game

### View a Game [GET]

+ Response 201 (application/json)

        {
                "Name": "Name",
                "Platform": "Platform",
                "Company": "Company",
                "Engine": "Engine",
                "Tags": [
                    "Tag One",
                    "Tag Two"
                ],
                "Rating": "Rating",
                "ID": "id"
        }

# Group Company

## Company [/company]

List of Company returns the total list of companies in our data model

### Company List [GET]

+ Response 201 (application/json)

        [
            {
                "Name": "Name",
                "Location": "Location",
                "Engine": "Engine",
                "Rating": "Rating",
                "Tags": [
                    "one",
                    "two"
                ],
                "ID": "id"
            }
        ]

### Company [/company/{company_id}]

These are the fields that will describe a company:

+ Name
+ Location
+ Engine
+ Tags - An array of special fields.
+ Rating - The average rating of games by the company
+ ID - the id of the developer in our database

+ Parameters
    + company_id: 1 (required, number) - The company's id which is unique to each company

### View a Company [GET]

+ Response 201 (application/json)

        {
                "Name": "Name",
                "Location": "Location",
                "Engine": "Engine",
                "Tags": [
                    "one",
                    "two"
                ],
                "Rating": "Rating",
                "ID": "id"
        }

# Group Platform

## Platform [/platform]

List of Platforms returns the total list of platforms in our data model

### Platforms List [GET]

+ Response 201 (application/json)

        [
            {
                "Name": "Name",
                "Release Date": "MM/DD/YYYY",
                "Rating": "Rating",
                "Number of Units": "Quantity",
                "Generation": "Number",
                "ID": "id"
            }
        ]

### Platform [/platform/{platform_id}]

These are the fields that will describe a platform:

+ Name
+ Release Date
+ Rating
+ Number of Units
+ Generation
+ Rating - The average rating of the platform
+ ID - the id of the platform in our database

+ Parameters
    + platform_id: 1 (required, number) - The platform's id which is unique to each platform

### View a Platform [GET]

+ Response 201 (application/json)

        {
            "Name": "Name",
            "Release Date": "MM/DD/YYYY",
            "Rating": "Rating",
            "Number of Units": "Quantity",
            "Generation": "Number",
            "ID": "id"
        }

# Group Image

## Image [/image]

List of images returns the total list of images in our data model

### Images List [GET]

+ Response 201 (application/json)

        [
            {
                "Name": "Name",
                "Source": "Source",
                "Entity": "Entity",
                "Key": "Key",
                "Type": [
                    "TypeA",
                    "TypeB"
                ]
            }
        ]

### Image [/image/{image_id}]

These are the fields that will describe an image:

+ Name
+ Source
+ Entity
+ Key
+ Type

+ Parameters
    + image_id: 1 (required, number) - The image's id which is unique to each image

### View an Image [GET]

+ Response 201 (application/json)

        {
            "Name": "Name",
            "Source": "Source",
            "Entity": "Entity",
            "Key": "Key",
            "Type": [
                "TypeA",
                "TypeB"
            ]
        }
